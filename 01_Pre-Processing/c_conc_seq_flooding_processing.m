clearvars -except subset;
close all;
rng(1);

%% Concurrent Sequential Flooding Processing
% This script setups the pre-processing for control files of concurrent 
% sequential flooding, loads mcds data, runs all conc seq. 
% flooding routines and saves the resulting node control info, ready to be 
% used in the NS3 simulations
% Be aware: for large/many networks this will create a lot of files in the
% output dir.

%% Configuration
disp("### Configuration Seq Flooding Processing: ...")

pp_linux = "/simresults/sim/USER/sg-flooding/";
pp_win = "C:\Users\USER\Documents\";
path_prefix = pp_linux; % Select platform prefix

% Experiment name to be used as save filename
output_name = "info";

% Path to mcds information generated by mcds_processing
path_to_input = strcat(path_prefix, "XX_output_mcds");

% Process only subset of all mcds results
if(~exist('subset','var'))
    subset = [31];
end

% Export path in which to save the results
path_export_control_info = strcat(path_prefix, "XX_output_control_files");

% Create export path
mkdir(path_export_control_info)

disp("### Configuration Seq Flooding: Done!")

%% Calculation
% Load subset mcds data
disp(strcat("### Loading mcds data for ID: ",num2str(subset), ": ..."));
load(strcat(path_to_input,"/mcds",num2str(subset),".mat"))
disp(strcat("### Loading mcds data for ID: ",num2str(subset), ": Done!"));

disp(strcat("### Generating node info data for ID: ",num2str(subset), ": ..."));
% Generate control files for all valid number of sequences
save_dir = strcat(path_export_control_info,"/MCDS-",num2str(subset));
mkdir(save_dir);
create_control_info(mcds_info.full_graph,...
                    mcds_info.mcds_graph,...
                    save_dir,...
                    1:mcds_info.numNodes,...
                    mcds_info.comRange);
disp(strcat("### Generating node info data for ID: ",num2str(subset), ": Done!"));
% Save Workspace
save(strcat(path_export_control_info,"/seqWS",num2str(subset),".mat"))

